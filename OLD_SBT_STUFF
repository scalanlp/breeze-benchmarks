
/* don't remember this stuff, but here it is. 
  def patchclasspath = Command.command("patchclasspath") { (state: State) =>
    val extracted = Project.extract(state)
    import extracted._
    println(currentProject.id)
    val classPath = Project.runTask(fullClasspath in Runtime, state).get._2.toEither.right.get.files.mkString(":")
    println(classPath)
    // return a state with javaOptionsPatched = true and javaOptions set correctly
    Project.extract(state).append(Seq(javaOptions ++= Seq("-cp", classPath)), state.put(caliperLoopKey, true))
  }

  val caliperFixForBenchmark = (

    // we need to add the runtime classpath as a "-cp" argument to the `javaOptions in run`, otherwise caliper
    // will not see the right classpath and die with a ConfigurationException
    // unfortunately `javaOptions` is a SettingsKey and `fullClasspath in Runtime` is a TaskKey, so we need to
    // jump through these hoops here in order to feed the result of the latter into the former
    onLoad in Global ~= { previous => state =>
      previous {
        state.get(caliperLoopKey) match {
          case None =>
            println("!"+ Project.extract(state).currentProject.id)
            // get the runtime classpath, turn into a colon-delimited string
            val classPath = Project.runTask(fullClasspath in Runtime, state).get._2.toEither.right.get.files.mkString(":")
            // return a state with javaOptionsPatched = true and javaOptions set correctly
            Project.extract(state).append(Seq(javaOptions ++= Seq("-cp", classPath)), state.put(caliperLoopKey, true))
            
          case Some(_) => // the javaOptions are already patched
            println("?"+Project.extract(state).currentProject.id)
            state
        }
      }
    }

  )

 val caliperLoopKey = AttributeKey[Boolean]("javaOptionsPatched") // attribute caliperLoopKey to prevent circular onLoad hook
*/
